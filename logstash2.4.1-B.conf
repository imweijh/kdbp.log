input {
  kafka {
    zk_connect => "kafka16:2181,kafka17:2181,kafka18:2181"
    topic_id => "jzjy"
    type => "jzjybp"
    group_id => "logstash"
    consumer_id => "16003B"
    consumer_threads => 2
    # auto_offset_reset => "smallest"
    # reset_beginning => true
    codec => json
    #decorate_events => true
  }
  kafka {
    zk_connect => "kafka16:2181,kafka17:2181,kafka18:2181"
    topic_id => "rzrq"
    type => "rzrqbp"
    group_id => "logstash"
    consumer_id => "2r16003B"
    consumer_threads => 2
    # auto_offset_reset => "smallest"
    # reset_beginning => true
    codec => json
    #decorate_events => true
  }
}

filter {
  if [type] == "jzjybp" {
    if ([LOG] =~ /L0100001/) { drop{} } # 删掉
    if ([LOG] =~ /L0300003/) { drop{} } # 删掉
    if ([LOG] =~ /L0107011/) { drop{} } # 删掉
    if ([LOG] =~ /L0301022/) { drop{} } # 删掉
    if ([LOG] =~ /L0300034/) { drop{} } # 删掉
    if ([LOG] =~ /L0301002/) { drop{} } # 删掉
    if ([LOG] =~ /L0300162/) { drop{} } # 删掉
    if ([LOG] =~ /L0380305/) { drop{} } # 删掉
    if ([LOG] =~ /L0380205/) { drop{} } # 删掉
    if ([LOG] =~ /L0204008/) { drop{} } # 删掉
    if ([LOG] =~ /L0304142/) { drop{} } # 删掉
    if ([LOG] =~ /L0302825/) { drop{} } # 删掉
    if ([LOG] =~ /L0303020/) { drop{} } # 删掉
  } else {
    if ([LOG] =~ /L0100001/) { drop{} } # 删掉
    if ([LOG] =~ /L0300003/) { drop{} } # 删掉
    # if ([LOG] =~ /L0107011/) { drop{} } # 删掉
    # if ([LOG] =~ /L0301022/) { drop{} } # 删掉
    if ([LOG] =~ /L0300034/) { drop{} } # 删掉
    if ([LOG] =~ /L0301002/) { drop{} } # 删掉
    if ([LOG] =~ /L0300162/) { drop{} } # 删掉
    if ([LOG] =~ /L0380305/) { drop{} } # 删掉
    if ([LOG] =~ /L0380205/) { drop{} } # 删掉
    if ([LOG] =~ /L0204008/) { drop{} } # 删掉
    if ([LOG] =~ /L0304142/) { drop{} } # 删掉
    if ([LOG] =~ /L0302825/) { drop{} } # 删掉
    if ([LOG] =~ /L0303020/) { drop{} } # 删掉
  }
  
  grok {
    match => [ "LOG","^<\s+%{DATA:pid}> BEGIN:%{DATA:lbmid}:\d\d-%{NOTSPACE:logtime}  \[%{DATA:reqstr}\]$" ]
    match => [ "LOG","^<\s+%{DATA:pid}> END  :%{DATA:lbmid}:\d\d-%{NOTSPACE:logtime}  cost \[%{NUMBER:bptime:int}\]ms$" ]
    tag_on_failure => [ "_grokfail_LOG"]
  }

  #if [lbmid] not in ["L0300017","L0109101","L0303001","L0409101","L0303002","L0403001","L0403002","L0403006","L0204001","L0204002","L0401001","L0380205","L0380305","L0380403","L0380404","L0380406","L0380002","L0380203","L0380303","L0380463","L0380307"] {
  #  drop{}
  #} 

  if [logtime] {
    if [FILE_PATH] {
      grok {
        # match => ["FILE_PATH","%{DATA}_%{NUMBER:logdate}.LST$"]
        match => ["FILE_PATH","^%{DATA:bppath}LBMCALL_%{NUMBER:logdate}.LST$"]
        tag_on_failure => [ "_grokfailure-logdate"]
        add_field => {"localtime" => "%{logdate} %{logtime}"}
      }
    } else {
      mutate {
        # this will only work on logs created the same day as read
        add_field => {"logdate" => "%{+YYYYMMdd}"}
        # merge with existing time field
        add_field => {"localtime" => "%{logdate} %{logtime}"}
      }
    }
  } # end if
  
  if [SOURCE_HOST] {
    if [bppath] {
      mutate {
        add_field => {"bpname" => "%{SOURCE_HOST}:%{bppath}"}
      }
    }
  }

  date {
    match => [ "localtime", "YYYYMMdd HH:mm:ss-SSSSSS" ]
    timezone => "Asia/Shanghai"
  }

  if [reqstr] {
    grok { # 为linux bp 处理 reqstr
        match => ["reqstr","^%{DATA:prefix}&%{GREEDYDATA:reqstr}$" ]
        # match => ["reqstr","^%{DATA:prefix}_CA=%{DATA:_CA}&%{GREEDYDATA:reqstr}$" ]
        # match => ["reqstr","^%{DATA:prefix}_ERRNO=%{DATA:_ERRNO}&%{GREEDYDATA:reqstr}$" ]
        overwrite => [ "reqstr" ]
        tag_on_failure => [ "_grokfail_reqstr"]
    }
  }

  if [lbmid] in ["L0303020","L0109101","L0303001","L0409101","L0303002","L0403001","L0403002","L0403006","L0204001","L0204002","L0401001","L0380307"] {
    kv { source => "reqstr" field_split => "&" value_split => "=" }
    if [F_OP_SITE] {
      ruby {
        code => '
          if event["F_OP_SITE"][1] == "@"
            event["kfs"] = event["F_OP_SITE"][0..1]
          end '
      }
    }
  } else if [lbmid] {
    kv { source => "reqstr" field_split => "&" value_split => "=" include_keys => [ "F_OP_SITE", "F_OP_USER", "ACCOUNT", "F_CHANNEL", "CUSTOMER", "TRD_ID", "FUND_CODE", "FUND_INTL" ]}
  }

  if [PRICE] {
    mutate {
      convert => { "PRICE" => "float" }
      convert => { "QTY" => "integer" }
    }
  }

  mutate {
    remove_field => [ "TOPIC","SOURCE_TYPE","POSITION","logdate","logtime","reqstr","_CA","_ENDIAN","AGENT_TIMESTAMP","INDEX","bppath","BJ_TRD_DATE" ]
  }

} # end filter

output {
  #stdout { codec => rubydebug }

  #file {
  #  path => "/tmp/%{type}_output_logstash.txt"
  #  codec => rubydebug
  #}

  if [type] == "jzjybp" {
    redis {
      host => "redis.server43:7379"
      db => 0
      data_type => "list"
      key => "logstash"
      batch => true
      batch_events => 500
      workers => 4
    }
  }

  if [type] == "rzrqbp" {
    redis {
      host => "redis.server43:7379"
      db => 1
      data_type => "list"
      key => "logstash"
      batch => true
      batch_events => 500
      workers => 4
    }
  }

}
